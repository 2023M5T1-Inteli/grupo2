Index: src/main/java/br/edu/inteli/cc/m5/grupo2/Recv.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package br.edu.inteli.cc.m5.grupo2;\r\n\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.JsonObject;\r\nimport com.rabbitmq.client.*;\r\n\r\nimport java.io.IOException;\r\nimport java.net.URISyntaxException;\r\nimport java.security.KeyManagementException;\r\nimport java.security.NoSuchAlgorithmException;\r\nimport java.util.List;\r\nimport java.util.concurrent.TimeoutException;\r\n\r\npublic class Recv {\r\n    private static final String URI = \"amqp://guest:guest@localhost:5672\";\r\n\r\n    public void startConsuming() {\r\n\r\n        java.util.logging.Logger.getLogger(\"com.rabbitmq.client\").setLevel(java.util.logging.Level.WARNING);\r\n\r\n        try (Connection connection = createConnection();\r\n\r\n         Channel channel = createChannel(connection)) {\r\n                declareQueue(channel, \"findroute\");\r\n                declareQueue(channel, \"process\");\r\n\r\n            Gson gson = new Gson();\r\n\r\n            while (true) {\r\n\r\n                GetResponse response = channel.basicGet(\"findroute\", true);\r\n\r\n                if (response != null) {\r\n\r\n                    String message = new String(response.getBody(), \"UTF-8\");\r\n                    JsonObject json = gson.fromJson(message, JsonObject.class);\r\n                    String projectId = json.get(\"id\").getAsString();\r\n                    JsonObject origin = json.getAsJsonObject(\"origin\");\r\n                    JsonObject destination = json.getAsJsonObject(\"destination\");\r\n                    double originLatitude = origin.get(\"latitude\").getAsDouble();\r\n                    double originLongitude = origin.get(\"longitude\").getAsDouble();\r\n                    double destinationLatitude = destination.get(\"latitude\").getAsDouble();\r\n                    double destinationLongitude = destination.get(\"longitude\").getAsDouble();\r\n\r\n                    System.out.println(\"\\n===============================================================================================\\n\");\r\n                    System.out.println(\" Received new find route request from project '\" + projectId + \"'.\\n\");\r\n                    System.out.println(\" Origin -----------------------------------------------------------------\");\r\n                    System.out.println(\"     Latitude: \" + originLatitude);\r\n                    System.out.println(\"     Longitude: \" + originLongitude);\r\n                    System.out.println(\" Destination ------------------------------------------------------------\");\r\n                    System.out.println(\"     Latitude: \" + destinationLatitude);\r\n                    System.out.println(\"     Longitude: \" + destinationLongitude);\r\n\r\n                    Graph graph = createGraph(projectId);\r\n\r\n                    Vertex originVertex = graph.findNearestVertex(originLatitude, originLongitude);\r\n                    Vertex destinationVertex = graph.findNearestVertex(destinationLatitude, destinationLongitude);\r\n\r\n                    List<Vertex> route = AStar.findPath(originVertex, destinationVertex);\r\n\r\n                    System.out.println(\"\\n Route found for project '\" + projectId + \"'.\");\r\n                    System.out.println(\"\\n===============================================================================================\\n\");\r\n\r\n                }\r\n\r\n                response = channel.basicGet(\"process\", true);\r\n\r\n                if (response != null) {\r\n\r\n                    String message = new String(response.getBody(), \"UTF-8\");\r\n                    JsonObject json = gson.fromJson(message, JsonObject.class);\r\n                    String projectId = json.get(\"id\").getAsString();\r\n                    System.out.println(\"\\n===============================================================================================\\n\");\r\n                    System.out.println(\" Received new processing request for project '\" + projectId + \"'.\\n\");\r\n                    System.out.println(\" Downloading file from S3...\");\r\n\r\n                    try {\r\n\r\n                        DownloadFileFromS3 downloadFileFromS3 = new DownloadFileFromS3();\r\n                        downloadFileFromS3.downloadFileFromS3(json.get(\"objectKey\").getAsString(), projectId);\r\n                        System.out.println(\" File downloaded successfully.\");\r\n                        processMessage(projectId);\r\n                        System.out.println(\"\\n Processing finished for project '\" + projectId + \"'.\");\r\n                        System.out.println(\"\\n===============================================================================================\\n\");\r\n\r\n                    } catch (Exception e) {\r\n\r\n                        System.out.println(\" Error while processing message for project \" + projectId + \": \" + e);\r\n\r\n                    }\r\n\r\n                }\r\n\r\n                Thread.sleep(1000);\r\n\r\n            }\r\n\r\n        } catch (Exception e) {\r\n\r\n            System.out.println(\" Error while consuming messages: \" + e);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    private Connection createConnection() throws IOException, TimeoutException, URISyntaxException, NoSuchAlgorithmException, KeyManagementException, TimeoutException {\r\n\r\n        ConnectionFactory factory = new ConnectionFactory();\r\n        factory.setUri(URI);\r\n        return factory.newConnection();\r\n\r\n    }\r\n\r\n    private Channel createChannel(Connection connection) throws IOException {\r\n\r\n        return connection.createChannel();\r\n\r\n    }\r\n\r\n    private void declareQueue(Channel channel, String queueName) throws IOException {\r\n\r\n        channel.queueDeclare(queueName, true, false, false, null);\r\n        System.out.println(\" Waiting for new messages in queue '\" + queueName + \"'.\");\r\n\r\n    }\r\n\r\n    private void processMessage(String projectId) throws Exception {\r\n\r\n        Graph graph = createGraph(projectId);\r\n        Neo4j neo4j = new Neo4j();\r\n        neo4j.persistMapBounds(graph, getRows(projectId), projectId);\r\n\r\n    }\r\n\r\n    private Graph createGraph(String projectId) throws Exception {\r\n\r\n        String path = System.getProperty(\"user.dir\") + \"/downloads/\" + projectId + \".dt2\";\r\n        double[][] map = Dted.readDted(path, 180);\r\n\r\n        System.out.println(\" File read successfully.\");\r\n        System.out.println(\" Loading graph instance.\");\r\n\r\n        Graph graph = new Graph();\r\n        for (int i = 0; i < map.length - 1; i++) {\r\n            graph.addVertex(map[i][1], map[i][2], map[i][0]);\r\n        }\r\n\r\n        System.out.println(\" Graph loaded successfully.\");\r\n        System.out.println(\" Connecting graph vertices...\");\r\n\r\n        int rows = (int) map[map.length - 1][1];\r\n        int cols = (int) map[map.length - 1][2];\r\n        graph.connectVertices(180, rows, cols);\r\n\r\n        System.out.println(\" Graph vertices connected successfully.\");\r\n\r\n        return graph;\r\n\r\n    }\r\n\r\n    private int getRows(String projectId) throws Exception {\r\n\r\n        String path = System.getProperty(\"user.dir\") + \"/downloads/\" + projectId + \".dt2\";\r\n        double[][] map = Dted.readDted(path, 180);\r\n        return (int) map[map.length - 1][1];\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/br/edu/inteli/cc/m5/grupo2/Recv.java b/src/main/java/br/edu/inteli/cc/m5/grupo2/Recv.java
--- a/src/main/java/br/edu/inteli/cc/m5/grupo2/Recv.java	
+++ b/src/main/java/br/edu/inteli/cc/m5/grupo2/Recv.java	
@@ -52,13 +52,14 @@
                     System.out.println("     Longitude: " + destinationLongitude);
 
                     Graph graph = createGraph(projectId);
-
                     Vertex originVertex = graph.findNearestVertex(originLatitude, originLongitude);
                     Vertex destinationVertex = graph.findNearestVertex(destinationLatitude, destinationLongitude);
-
                     List<Vertex> route = AStar.findPath(originVertex, destinationVertex);
 
-                    System.out.println("\n Route found for project '" + projectId + "'.");
+                    Neo4j neo4j = new Neo4j();
+                    neo4j.persistRoute(route, projectId);
+
+                    System.out.println("\n Route found and persisted for project '" + projectId + "'.");
                     System.out.println("\n===============================================================================================\n");
 
                 }
Index: src/main/java/br/edu/inteli/cc/m5/grupo2/Vertex.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package br.edu.inteli.cc.m5.grupo2;\r\n\r\nimport java.util.LinkedList;\r\n\r\npublic class Vertex implements Comparable<Vertex> {\r\n\r\n    private final int id;\r\n    private final double latitude;\r\n    private final double longitude;\r\n    private final double altitude;\r\n    private final LinkedList<Edge> connections;\r\n    private double custoDoInicio = Double.POSITIVE_INFINITY;\r\n    private double custoEstimadoTotal;\r\n    private Vertex pai;\r\n\r\n    public Vertex(int id, double latitude, double longitude, double altitude) {\r\n        this.id = id;\r\n        this.latitude = latitude;\r\n        this.longitude = longitude;\r\n        this.altitude = altitude;\r\n        this.connections = new LinkedList<Edge>();\r\n    }\r\n\r\n    public int getId() {\r\n        return this.id;\r\n    }\r\n\r\n    public double getLatitude() {\r\n        return this.latitude;\r\n    }\r\n\r\n    public double getLongitude() {\r\n        return this.longitude;\r\n    }\r\n\r\n    public double getAltitude() {\r\n        return this.altitude;\r\n    }\r\n\r\n    public Edge getConnectionAt(int index) {\r\n        return this.connections.get(index);\r\n    }\r\n\r\n    public LinkedList<Edge> getAllConnections() {\r\n        return this.connections;\r\n    }\r\n    public LinkedList<Edge> getConnections() {\r\n        return this.connections;\r\n    }\r\n\r\n\r\n    public int getNumberOfConnections() {\r\n        return this.connections.size();\r\n    }\r\n\r\n\r\n    /*\r\n     * Add a connection from a departure vertex to an arrival vertex by creating a new edge in connections adjacency list.\r\n     * @param   Vertex   arrivalVertex\r\n     */\r\n    public void addConnectionTo(Vertex arrivalVertex) {\r\n        int weight = (int) Math.abs(arrivalVertex.getAltitude() - this.altitude);\r\n        this.connections.add(new Edge(arrivalVertex, weight));\r\n    }\r\n\r\n    /*\r\n     * Return a string that represents the adjacency list of the vertex in a specific format.\r\n     * @return   String   \"0: 1 | 2 | 3 | ... | n\"\r\n     */\r\n    public String getAdjacencyListAsString() {\r\n        int quantityOfConnections = this.getNumberOfConnections();\r\n        StringBuilder str = new StringBuilder(Integer.toString(this.id) + \": \");\r\n\r\n        for (int i = 0; i < quantityOfConnections; i++) {\r\n            str.append(getConnectionAt(i).getArrivalVertex().getId());\r\n            if (i + 1 < quantityOfConnections) str.append(\" | \");\r\n        }\r\n\r\n        return str.toString();\r\n    }\r\n    public void setCustoDoInicio(double custo) {\r\n        this.custoDoInicio = custo;\r\n    }\r\n    public void setCustoEstimadoTotal(double custoEstimadoTotal) {\r\n        this.custoEstimadoTotal = custoEstimadoTotal;\r\n    }\r\n    public double getCustoDoInicio() {\r\n        return custoDoInicio;\r\n    }\r\n    public void setPai(Vertex pai) {\r\n        this.pai = pai;\r\n    }\r\n    public Vertex getPai() {\r\n        return pai;\r\n    }\r\n    public int compareTo(Vertex other) {\r\n        return Double.compare(this.getCustoEstimadoTotal(), other.getCustoEstimadoTotal());\r\n    }\r\n    public double getCustoEstimadoTotal() {\r\n        return this.custoEstimadoTotal;\r\n    }\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/br/edu/inteli/cc/m5/grupo2/Vertex.java b/src/main/java/br/edu/inteli/cc/m5/grupo2/Vertex.java
--- a/src/main/java/br/edu/inteli/cc/m5/grupo2/Vertex.java	
+++ b/src/main/java/br/edu/inteli/cc/m5/grupo2/Vertex.java	
@@ -1,6 +1,8 @@
 package br.edu.inteli.cc.m5.grupo2;
 
+import java.util.HashMap;
 import java.util.LinkedList;
+import java.util.Map;
 
 public class Vertex implements Comparable<Vertex> {
 
@@ -100,6 +102,16 @@
         return this.custoEstimadoTotal;
     }
 
+    public Map<String, Object> toMap() {
+        Map<String, Object> result = new HashMap<>();
+        result.put("id", id);
+        result.put("latitude", latitude);
+        result.put("longitude", longitude);
+        result.put("altitude", altitude);
+        return result;
+    }
+
+
 
 
 }
Index: src/main/java/br/edu/inteli/cc/m5/grupo2/Neo4j.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package br.edu.inteli.cc.m5.grupo2;\r\n\r\nimport ch.qos.logback.classic.Logger;\r\nimport ch.qos.logback.classic.LoggerContext;\r\nimport org.neo4j.driver.Record;\r\nimport org.neo4j.driver.*;\r\nimport org.neo4j.driver.exceptions.Neo4jException;\r\nimport org.slf4j.LoggerFactory;\r\n\r\nimport java.io.FileNotFoundException;\r\nimport java.util.Map;\r\n\r\npublic class Neo4j implements AutoCloseable {\r\n    private final Driver driver;\r\n\r\n    public Neo4j() {\r\n\r\n        String uri = \"neo4j://localhost:7687\";\r\n        String user = \"neo4j\";\r\n        String password = \"x5aG^RSZz!zetdlM19XsJEsa227GsC32\";\r\n\r\n        LoggerContext loggerContext = (LoggerContext)LoggerFactory.getILoggerFactory();\r\n        Logger rootLogger = loggerContext.getLogger(\"io.netty\");\r\n        rootLogger.setLevel(ch.qos.logback.classic.Level.OFF);\r\n\r\n\r\n        this.driver = GraphDatabase.driver(\r\n                uri,\r\n                AuthTokens.basic(user, password),\r\n                Config.defaultConfig());\r\n\r\n    }\r\n\r\n    public void persistMapBounds(Graph graph, int rows, String projectId) throws FileNotFoundException {\r\n\r\n        Query query = new Query(\r\n                \"\"\"\r\n                        MATCH (p:Project)\r\n                        WHERE p.id = $id\r\n                        SET p.status = \"processed\"\r\n                        \r\n                        MERGE (p)-[:HAS]->(m:Map {topLeft: [$tL_latitude, $tL_longitude], topRight: [$tR_latitude, $tR_longitude], bottomLeft: [$bL_latitude, $bL_longitude], bottomRight: [$bR_latitude, $bR_longitude]});\r\n                        \"\"\",\r\n                Map.of(\r\n                        \"tL_latitude\", graph.getVertices().get(0).getLatitude(),\r\n                        \"tL_longitude\", graph.getVertices().get(0).getLongitude(),\r\n                        \"tR_latitude\", graph.getVertices().get(rows).getLatitude(),\r\n                        \"tR_longitude\", graph.getVertices().get(rows).getLongitude(),\r\n                        \"bL_latitude\", graph.getVertices().get(graph.getVertices().size() - rows).getLatitude(),\r\n                        \"bL_longitude\", graph.getVertices().get(graph.getVertices().size() - rows).getLongitude(),\r\n                        \"bR_latitude\", graph.getVertices().get(graph.getVertices().size() - 1).getLatitude(),\r\n                        \"bR_longitude\", graph.getVertices().get(graph.getVertices().size() - 1).getLongitude(),\r\n                        \"id\", projectId));\r\n\r\n        try {\r\n\r\n            Session session = driver.session(SessionConfig.forDatabase(\"neo4j\"));\r\n            \r\n            session.executeWrite(tx -> tx.run(query));\r\n\r\n        } catch (Neo4jException exception) {\r\n\r\n            throw exception;\r\n\r\n        }\r\n    }\r\n\r\n    public void createVertex(Vertex vertex) {\r\n\r\n        Query query = new Query(\r\n                \"\"\"\r\n                        CREATE (vertex:Vertex {\r\n                                id: $id,\r\n                                latitude: $latitude,\r\n                                longitude: $longitude,\r\n                                altitude: $altitude,\r\n                                connections: $connections\r\n                            })\r\n                            \r\n                        RETURN vertex\r\n                        \"\"\",\r\n                Map.of(\r\n                        \"id\",vertex.getId(),\r\n                        \"latitude\", vertex.getLatitude(),\r\n                        \"longitude\", vertex.getLongitude(),\r\n                        \"altitude\", vertex.getAltitude(),\r\n                        \"connections\", vertex.getAllConnections()));\r\n\r\n        try {\r\n\r\n            Session session = driver.session(SessionConfig.forDatabase(\"neo4j\"));\r\n\r\n            session.executeWrite(tx -> tx.run(query).single());\r\n\r\n        } catch (Neo4jException exception) {\r\n\r\n            throw exception;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    public void findVertex(int vertexId) {\r\n\r\n        Query query = new Query(\r\n                \"\"\"\r\n                        MATCH (vertex:Vertex)\r\n                        WHERE vertex.id = $id\r\n                        RETURN vertex.id, vertex.latitude, vertex.longitude, vertex.altitude\r\n                        \"\"\",\r\n\r\n                Map.of(\"id\", vertexId));\r\n\r\n        try {\r\n\r\n            Session session = driver.session(SessionConfig.forDatabase(\"neo4j\"));\r\n\r\n            Record record = session.executeWrite(tx -> tx.run(query).single());\r\n\r\n            System.out.println(\"Vertex found successfully: \");\r\n\r\n            System.out.println(\"Vertex found successfully: \");\r\n            System.out.println(\"id: \" + record.get(\"vertex.id\"));\r\n            System.out.println(\"latitude: \" + record.get(\"vertex.latitude\"));\r\n            System.out.println(\"longitude: \" + record.get(\"vertex.longitude\"));\r\n            System.out.println(\"altitude: \" + record.get(\"vertex.altitude\"));\r\n\r\n\r\n        } catch (Neo4jException exception) {\r\n\r\n            throw exception;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    public void connectVertex(Vertex vertexA) {\r\n\r\n        vertexA.getAllConnections().forEach(connection -> {\r\n\r\n            Vertex vertexB = connection.getArrivalVertex();\r\n\r\n            Query query = new Query(\r\n                    \"\"\"\r\n                            MERGE (vertexA:Vertex {\r\n                                    id: $vertexA_id,\r\n                                    latitude: $vertexA_latitude,\r\n                                    longitude: $vertexA_longitude,\r\n                                    altitude: $vertexA_altitude\r\n                                })\r\n                                \r\n                            MERGE (vertexB:Vertex {\r\n                                    id: $vertexB_id,\r\n                                    latitude: $vertexB_latitude,\r\n                                    longitude: $vertexB_longitude,\r\n                                    altitude: $vertexB_altitude\r\n                                })\r\n                                \r\n                            MERGE (vertexA)-[:CONNECT_TO]->(vertexB)\r\n                            \r\n                            RETURN vertexA, vertexB\r\n                            \"\"\",\r\n                    Map.of(\r\n                            \"vertexA_id\", vertexA.getId(),\r\n                            \"vertexA_latitude\", vertexA.getLatitude(),\r\n                            \"vertexA_longitude\", vertexA.getLongitude(),\r\n                            \"vertexA_altitude\", vertexA.getAltitude(),\r\n                            \"vertexB_id\", vertexB.getId(),\r\n                            \"vertexB_latitude\", vertexB.getLatitude(),\r\n                            \"vertexB_longitude\", vertexB.getLongitude(),\r\n                            \"vertexB_altitude\", vertexB.getAltitude()));\r\n\r\n            try {\r\n\r\n                Session session = driver.session(SessionConfig.forDatabase(\"neo4j\"));\r\n\r\n                session.executeWrite(tx -> tx.run(query).list());\r\n\r\n                System.out.println(\"Vertexes connected\");\r\n\r\n            } catch (Neo4jException exception) {\r\n\r\n                throw exception;\r\n\r\n            }\r\n\r\n        });\r\n\r\n    }\r\n\r\n    public void deleteVertex(Vertex vertex) {\r\n\r\n        Query query = new Query(\r\n                \"\"\"\r\n                        MATCH (vertex:Vertex {\r\n                                id: $id\r\n                            })\r\n                            \r\n                        DETACH DELETE vertex\r\n                        \"\"\",\r\n                Map.of(\"id\", vertex.getId()));\r\n\r\n        try {\r\n\r\n            Session session = driver.session(SessionConfig.forDatabase(\"neo4j\"));\r\n\r\n            session.executeWrite(tx -> tx.run(query));\r\n\r\n            System.out.println(\"Vertex deleted successfully.\");\r\n\r\n        } catch (Neo4jException exception) {\r\n\r\n            throw exception;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    public void updateVertex(int vertexId, Vertex updatedVertex) {\r\n\r\n        Query query = new Query(\r\n                \"\"\"\r\n                        MATCH (vertex:Vertex {\r\n                                id: $id\r\n                            })\r\n                        \r\n                        SET vertex.latitude = $latitude,\r\n                            vertex.longitude = $longitude,\r\n                            vertex.altitude = $altitude\r\n                            \r\n                        RETURN vertex\r\n                        \"\"\",\r\n                Map.of(\r\n                        \"id\", vertexId,\r\n                        \"latitude\", updatedVertex.getLatitude(),\r\n                        \"longitude\", updatedVertex.getLongitude(),\r\n                        \"altitude\", updatedVertex.getAltitude()));\r\n\r\n        try {\r\n\r\n            Session session = driver.session(SessionConfig.forDatabase(\"neo4j\"));\r\n\r\n            session.executeWrite(tx -> tx.run(query).single());\r\n\r\n            System.out.println(\"Vertex updated successfully.\");\r\n\r\n        } catch (Neo4jException exception) {\r\n            throw exception;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void close() {\r\n        driver.close();\r\n    }\r\n\r\n    // Test of this class' methods\r\n    public static void main(String[] args) throws FileNotFoundException {\r\n        Graph graph = new Graph();\r\n        Neo4j neo4j = new Neo4j();\r\n\r\n        Vertex vertex = new Vertex(0,100.00, 100.00, 100.00);\r\n        Vertex vertex2 = new Vertex(1,100.00, 200.00, 200.00);\r\n        Vertex vertex3 = new Vertex(2,150.00, 150.00, 150.00);\r\n        Vertex vertex4 = new Vertex(3,150.00, 200.00, 150.00);\r\n        Vertex vertex5 = new Vertex(4,150.00, 200.00, 150.00);\r\n\r\n        graph.addVertex(vertex);\r\n        graph.addVertex(vertex2);\r\n        graph.addVertex(vertex3);\r\n        graph.addVertex(vertex4);\r\n\r\n        graph.addEdge(vertex.getId(), vertex2.getId());\r\n        graph.addEdge(vertex.getId(), vertex3.getId());\r\n        graph.addEdge(vertex3.getId(), vertex2.getId());\r\n        graph.addEdge(vertex2.getId(), vertex4.getId());\r\n\r\n        neo4j.createVertex(vertex5);\r\n        System.out.println(\"/////////////////////////////////////////////////////////////////\");\r\n        neo4j.findVertex(4);\r\n        System.out.println(\"/////////////////////////////////////////////////////////////////\");\r\n        neo4j.connectVertex(vertex2);\r\n        System.out.println(\"/////////////////////////////////////////////////////////////////\");\r\n        neo4j.updateVertex(1, vertex5);\r\n        System.out.println(\"/////////////////////////////////////////////////////////////////\");\r\n        neo4j.deleteVertex(vertex);\r\n        System.out.println(\"/////////////////////////////////////////////////////////////////\");\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/br/edu/inteli/cc/m5/grupo2/Neo4j.java b/src/main/java/br/edu/inteli/cc/m5/grupo2/Neo4j.java
--- a/src/main/java/br/edu/inteli/cc/m5/grupo2/Neo4j.java	
+++ b/src/main/java/br/edu/inteli/cc/m5/grupo2/Neo4j.java	
@@ -2,13 +2,16 @@
 
 import ch.qos.logback.classic.Logger;
 import ch.qos.logback.classic.LoggerContext;
+import com.google.gson.Gson;
 import org.neo4j.driver.Record;
 import org.neo4j.driver.*;
 import org.neo4j.driver.exceptions.Neo4jException;
 import org.slf4j.LoggerFactory;
 
 import java.io.FileNotFoundException;
+import java.util.List;
 import java.util.Map;
+import java.util.stream.Collectors;
 
 public class Neo4j implements AutoCloseable {
     private final Driver driver;
@@ -31,6 +34,51 @@
 
     }
 
+    public void persistRoute(List<Vertex> route, String projectId) throws FileNotFoundException {
+
+        Gson gson = new Gson();
+
+        List<Map<String, Object>> vertexMaps = route.stream()
+                .map(Vertex::toMap)
+                .collect(Collectors.toList());
+
+        String vertices = gson.toJson(vertexMaps);
+
+        Query query = new Query(
+                """
+                        MATCH (p:Project)
+                        WHERE p.id = $id
+                        
+                        MERGE (p)-[:HAS]->(r:Route {vertices: $vertices});
+                        """,
+                Map.of(
+                        "id", projectId,
+                        "vertices", vertices));
+
+        Query query2 = new Query(
+                """
+                        MATCH (p:Project)
+                        WHERE p.id = $id
+                            SET p.status = "routed"
+                        """,
+                Map.of(
+                        "id", projectId));
+
+        try {
+
+            Session session = driver.session(SessionConfig.forDatabase("neo4j"));
+
+            session.executeWrite(tx -> tx.run(query));
+
+            session.executeWrite(tx -> tx.run(query2));
+
+        } catch (Neo4jException exception) {
+
+            throw exception;
+
+        }
+    }
+
     public void persistMapBounds(Graph graph, int rows, String projectId) throws FileNotFoundException {
 
         Query query = new Query(
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"4ea1af99-436f-4525-9473-d871fef53af1\" name=\"Changes\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/br/edu/inteli/cc/m5/grupo2/Recv.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/br/edu/inteli/cc/m5/grupo2/Recv.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"CompilerWorkspaceConfiguration\">\r\n    <option name=\"CLEAR_OUTPUT_DIRECTORY\" value=\"false\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"FindBugs-IDEA-Workspace\">\r\n    <analyzeAfterCompile>true</analyzeAfterCompile>\r\n    <toolWindowToFront>false</toolWindowToFront>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"MavenImportPreferences\">\r\n    <option name=\"generalSettings\">\r\n      <MavenGeneralSettings>\r\n        <option name=\"useMavenConfig\" value=\"true\" />\r\n      </MavenGeneralSettings>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2LppiNiWhTrwlEHvXszzqJPFQ3p\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"abbreviatePackageNames\" value=\"true\" />\r\n    <option name=\"autoscrollFromSource\" value=\"true\" />\r\n    <option name=\"autoscrollToSource\" value=\"true\" />\r\n    <option name=\"flattenPackages\" value=\"true\" />\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showExcludedFiles\" value=\"false\" />\r\n    <option name=\"showModules\" value=\"false\" />\r\n    <option name=\"sortByType\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;Downloaded.Files.Path.Enabled&quot;: &quot;false&quot;,\r\n    &quot;Repository.Attach.Annotations&quot;: &quot;false&quot;,\r\n    &quot;Repository.Attach.JavaDocs&quot;: &quot;false&quot;,\r\n    &quot;Repository.Attach.Sources&quot;: &quot;false&quot;,\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/Elias/Documents/GitHub/Turma-4/grupo2&quot;,\r\n    &quot;project.structure.last.edited&quot;: &quot;Global Libraries&quot;,\r\n    &quot;project.structure.proportion&quot;: &quot;0.0&quot;,\r\n    &quot;project.structure.side.proportion&quot;: &quot;0.0&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;MavenRunHelper&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\Elias\\Documents\\GitHub\\grupo2\" />\r\n      <recent name=\"C:\\Users\\Elias\\Documents\\GitHub\\Turma-4\\grupo2\\src\\main\\java\\br\\edu\\inteli\\cc\\m5\\grupo\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Application.App\">\r\n    <configuration name=\"App\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"br.edu.inteli.cc.m5.grupo2.App\" />\r\n      <module name=\"template\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"br.edu.inteli.cc.m5.grupo2.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"DownloadFileFromS3\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"br.edu.inteli.cc.m5.grupo2.DownloadFileFromS3\" />\r\n      <module name=\"template\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"br.edu.inteli.cc.m5.grupo2.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Neo4j\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"br.edu.inteli.cc.m5.grupo2.Neo4j\" />\r\n      <module name=\"template\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"br.edu.inteli.cc.m5.grupo2.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Recv\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"br.edu.inteli.cc.m5.grupo2.AStarTest\" />\r\n      <module name=\"template\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"%MODULE_WORKING_DIR%\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"br.edu.inteli.cc.m5.grupo2.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"Application\" factoryName=\"Application\">\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"JUnit\" factoryName=\"JUnit\">\r\n      <option name=\"TEST_OBJECT\" value=\"class\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"%MODULE_WORKING_DIR%\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"AStarTest.findPathOneDted\" type=\"TestNG\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"template\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"br.edu.inteli.cc.m5.grupo2.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <option name=\"PACKAGE_NAME\" value=\"br.edu.inteli.cc.m5.grupo2\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"br.edu.inteli.cc.m5.grupo2.AStarTest\" />\r\n      <option name=\"METHOD_NAME\" value=\"findPathOneDted\" />\r\n      <option name=\"TEST_OBJECT\" value=\"METHOD\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"%MODULE_WORKING_DIR%\" />\r\n      <properties />\r\n      <listeners />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"TestNG\">\r\n      <option name=\"TEST_OBJECT\" value=\"CLASS\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"%MODULE_WORKING_DIR%\" />\r\n      <properties />\r\n      <listeners />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.App\" />\r\n        <item itemvalue=\"TestNG.AStarTest.findPathOneDted\" />\r\n        <item itemvalue=\"Application.Neo4j\" />\r\n        <item itemvalue=\"Application.DownloadFileFromS3\" />\r\n        <item itemvalue=\"Application.Recv\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"4ea1af99-436f-4525-9473-d871fef53af1\" name=\"Changes\" comment=\"\" />\r\n      <created>1677176401338</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1677176401338</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Delete Neo4j\">\r\n      <created>1677255326175</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1677255326175</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"2\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/src/main/java/br/edu/inteli/cc/m5/grupo2/AStar.java</url>\r\n          <line>58</line>\r\n          <option name=\"timeStamp\" value=\"2\" />\r\n        </line-breakpoint>\r\n        <breakpoint enabled=\"true\" type=\"java-exception\">\r\n          <properties class=\"org.neo4j.driver.exceptions.NoSuchRecordException\" package=\"org.neo4j.driver.exceptions\" />\r\n          <option name=\"timeStamp\" value=\"3\" />\r\n        </breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/grupo2$App.ic\" NAME=\"App Coverage Results\" MODIFIED=\"1677016547623\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"idea\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\">\r\n      <FILTER>br.edu.inteli.cc.m5.grupo2.*</FILTER>\r\n    </SUITE>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	
+++ b/.idea/workspace.xml	
@@ -6,7 +6,9 @@
   <component name="ChangeListManager">
     <list default="true" id="4ea1af99-436f-4525-9473-d871fef53af1" name="Changes" comment="">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/br/edu/inteli/cc/m5/grupo2/Neo4j.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/br/edu/inteli/cc/m5/grupo2/Neo4j.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/br/edu/inteli/cc/m5/grupo2/Recv.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/br/edu/inteli/cc/m5/grupo2/Recv.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/br/edu/inteli/cc/m5/grupo2/Vertex.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/br/edu/inteli/cc/m5/grupo2/Vertex.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -191,6 +193,11 @@
     </task>
     <option name="localTasksCounter" value="2" />
     <servers />
+  </component>
+  <component name="UnknownFeatures">
+    <option featureType="dependencySupport" implementationName="java:io.projectreactor:reactor-core" />
+    <option featureType="dependencySupport" implementationName="java:com.amazonaws:aws-java-sdk-core" />
+    <option featureType="dependencySupport" implementationName="java:com.amazonaws:aws-java-sdk-s3" />
   </component>
   <component name="XDebuggerManager">
     <breakpoint-manager>
